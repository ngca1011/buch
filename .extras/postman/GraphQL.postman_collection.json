{
	"info": {
		"_postman_id": "8464fb8b-993c-42f4-a46c-448386eeaed5",
		"name": "GraphQL",
		"description": "GraphQL-Schnittstelle",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30018492",
		"_collection_link": "https://speeding-escape-722139.postman.co/workspace/film~3ad1a820-81ed-4f5d-8c24-537da30a9a63/collection/30018492-8464fb8b-993c-42f4-a46c-448386eeaed5?action=share&source=collection_link&creator=30018492"
	},
	"item": [
		{
			"name": "Query",
			"item": [
				{
					"name": "Suche sprache, direktor, filmstart und titel vom Film mit ID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const {response} = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"})\r",
									"\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { film } = body.data;\r",
									"    const { sprache, direktor, filmstart, titel } = film;\r",
									"    pm.expect(sprache).to.be.a('string');\r",
									"    pm.expect(direktor).to.be.a('string');\r",
									"    pm.expect(filmstart).to.be.a('string');\r",
									"    pm.expect(titel.titel).to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($id: ID! = \"1\") {\r\n  film(id: $id) {\r\n    sprache\r\n    direktor\r\n    filmstart\r\n    titel {\r\n      titel\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"id\": \"1\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche sprache von einem Buch mit nicht-vorhandener 999999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type is application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"\r",
									"pm.test('Body contains errors', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.include('999999');\r",
									"    pm.expect(path).to.be.an('array').that.has.a.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('film');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($id: ID! = \"1\") {\r\n  film(id: $id) {\r\n    sprache\r\n  }\r\n}",
								"variables": "{\r\n  \"id\": \"999999\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche id, version und titel von allen Filmen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type is application/json', () => {\r",
									"    const { headers } = pm.response;\r",
									"    const contentType = headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"\r",
									"pm.test('Response body has correct properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { filme } = body.data;\r",
									"    pm.expect(filme).to.be.an('array').that.is.not.empty;\r",
									"    filme.forEach(film => {\r",
									"        const { id, version, titel } = film;\r",
									"        pm.expect(id).to.be.a('number').that.is.gte(0);\r",
									"        pm.expect(version).to.be.a('number').that.is.gte(0);\r",
									"        pm.expect(titel.titel).to.be.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  filme {\r\n    id\r\n    version\r\n    titel {\r\n      titel\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche direktor von Filmen mit Titel Alpha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type is application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?$/u);\r",
									"});\r",
									"\r",
									"pm.test('Body contain filme array', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { filme } = body.data;\r",
									"    pm.expect(filme).to.be.an('array').that.is.not.empty;\r",
									"    filme.forEach(film => {\r",
									"        pm.expect(film.direktor).to.be.a('string');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($titel: String = \"Alpha\") {\r\n  filme(titel: $titel) {\r\n    direktor\r\n  }\r\n}",
								"variables": "{\r\n  \"titel\": \"Alpha\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Suche dauer von Filmen mit nicht-vorhandenem Titel Nichtvorhanden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type is application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?$/u);\r",
									"});\r",
									"\r",
									"pm.test('Body contains errors', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.be.a('string').that.includes('Nichtvorhanden');\r",
									"    pm.expect(path).to.be.an('array').that.has.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('filme');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($titel: String = \"Nichtvorhanden\") {\r\n  filme(titel: $titel) {\r\n    dauer\r\n  }\r\n}",
								"variables": "{\r\n  \"titel\": \"Nichtvorhanden\"\r\n}"
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Queries mit der GraphQL-Schnittstelle"
		},
		{
			"name": "Mutation",
			"item": [
				{
					"name": "Neuen Film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const {response} = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"})\r",
									"\r",
									"pm.test('Body mit den Properties', () => {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property('data');\r",
									"    pm.expect(body.data).to.have.property('create');\r",
									"    pm.expect(body.data.create.id).to.be.a('number').that.is.gte(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  create(\r\n    input: {\r\n      rating: 1,\r\n    filmstart: \"2022-01-31\",\r\n    dauer: 180,\r\n    sprache: \"Englisch\",\r\n    direktor: \"Tom Alder\",\r\n    genres: [\"ROMANCE\", \"HORROR\"],\r\n    titel: {\r\n        titel: \"The Ring 3\",\r\n        originaltitel: \"Der Ring\",\r\n        serienname: \"The Ring\",\r\n    },\r\n    schauspielers: [\r\n        {\r\n            vorname: \"Rose\",\r\n            nachname: \"Millian\",\r\n            geschlecht: \"weiblich\",\r\n            email: \"rose21312@gmail.com\",\r\n            telefonnummer: \"01382381231\",\r\n        },\r\n        {\r\n            vorname: \"Bob\",\r\n            nachname: \"Millian\",\r\n            geschlecht: \"männlich\",\r\n            email: \"bobhollywood@gmail.com\",\r\n            telefonnummer: \"0123129321\",\r\n        }\r\n    ]\r\n    }\r\n  ) {\r\n      id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Neuen Film mit ungültigen Daten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Content-Type is application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"\r",
									"pm.test('Errors in Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { errors, data } = body;\r",
									"    pm.expect(errors).to.be.an('array').that.has.lengthOf(1);\r",
									"    const { message, path, extensions } = errors[0];\r",
									"    pm.expect(message).to.be.a('string');\r",
									"    const props = ['titel.titel', 'schauspielers.0.email', 'schauspielers.1.email', 'schauspielers.1.telefonnummer', 'rating', 'filmstart'];\r",
									"    props.forEach(prop => pm.expect(message).to.include(prop));\r",
									"    pm.expect(path).to.be.an('array').that.has.lengthOf(1);\r",
									"    pm.expect(path[0]).to.be.equal('create');\r",
									"    pm.expect(extensions.code).to.be.equal('BAD_USER_INPUT');\r",
									"    pm.expect(data.create).to.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  create(\r\n    input: {\r\n      rating: -123,\r\n    filmstart: \"sadasdasjdqw\",\r\n    dauer: -123,\r\n    sprache: \"Englisch\",\r\n    direktor: \"Tom Alder\",\r\n    genres: [\"KSAAS\", \"TLKS\"],\r\n    titel: {\r\n        titel: \"!!!!!\",\r\n        originaltitel: \"12312312\",\r\n        serienname: \"123213123\",\r\n    },\r\n    schauspielers: [\r\n        {\r\n            vorname: \"Rose\",\r\n            nachname: \"Millian\",\r\n            geschlecht: \"213123\",\r\n            email: \"sadfsdf23\",\r\n            telefonnummer: \"123sadsd\",\r\n        },\r\n        {\r\n            vorname: \"invalid name\",\r\n            nachname: \"Invalid nachname\",\r\n            geschlecht: \"213123\",\r\n            email: \"asdfsdfasd\",\r\n            telefonnummer: \"sdfaasf\",\r\n        }\r\n    ]\r\n    }\r\n  ) {\r\n      id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{graphql_url}}",
							"host": [
								"{{graphql_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Neuanlegen, Ändern und Löschen mit der GraphQL-Schnittstelle",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"    url: 'https://localhost:3000/graphql',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: JSON.stringify({",
							"        query: `",
							"            mutation {",
							"                login(username: \"admin\", password: \"p\") {",
							"                    token",
							"                }",
							"            }",
							"        `",
							"    })",
							"}, (err, res) => {",
							"    pm.collectionVariables.set('TOKEN', res.json().data.login.token);",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "graphql_url",
			"value": "{{base_url}}/graphql",
			"type": "string"
		},
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		}
	]
}